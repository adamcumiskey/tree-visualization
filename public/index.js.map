{"version":3,"sources":["index.js"],"names":["scale","nodeWidth","horizontalSpace","verticalSpace","compare","a","b","localeCompare","undefined","Tree","children","length","sum","i","width","BinaryTree","data","left","right","meta","h","color","value","find","insert","filter","v","nodeCount","randomNumber","Math","floor","random","tree","container","document","getElementById","canvas","createElement","appendChild","drawLine","ctx","center","lineTo","stroke","drawNode","save","fillStyle","beginPath","arc","PI","fill","restore","drawLabel","font","textAlign","fillText","drawTree","fn","moveTo","baseWidth","origin","forEach","child","childWidth","childCenter","reload","getContext","window","innerHeight","height","onresize","onload"],"mappings":"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","file":"index.js","sourcesContent":["const scale = 1.0\nconst nodeWidth = 15 * scale\nconst horizontalSpace = 50 * scale\nconst verticalSpace = 50 * scale\n\nconst compare = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) { return 0 }\n    if (a < b) { return -1 }\n    if (a > b) { return 1 }\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a.localeCompare(b)\n  } else if (a.compare !== undefined && typeof a === typeof b) {\n    return a.compare(b)\n  }\n}\n\nclass Tree {\n  get width() {\n    if (this.children === undefined || this.children.length == 0) {\n      return nodeWidth\n    } else {\n      var sum = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        sum += this.children[i].width\n      }\n      return sum + (horizontalSpace * (this.children.length - 1))\n    }\n  }\n\n}\n\nclass BinaryTree extends Tree {\n  constructor(data, left, right) {\n    super()\n    this.data = data\n    this.left = left\n    this.right = right\n\n    if (typeof data === 'number') {\n      this.meta = {}\n      var h = (data/100)*300\n      this.meta.color = `hsl(${h}, 100%, 50%)`\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  find(value) {\n    switch (compare(value, this.data)) {\n      case -1:\n        return this.left.find(value)\n      case 0:\n        return this\n      case 1:\n        return this.right.find(value)\n    }\n  }\n\n  insert(value) {\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left === undefined) {\n          this.left = new BinaryTree(value)\n        } else {\n          this.left.insert(value)\n        }\n        break\n      case 1:\n        if (this.right === undefined) {\n          this.right = new BinaryTree(value)\n        } else {\n          this.right.insert(value)\n        }\n    }\n  }\n\n}\n\nconst nodeCount = 30\nconst randomNumber = function() { return Math.floor(Math.random() * 100) }\nvar tree = new BinaryTree(randomNumber())\nfor (var i = 0; i < nodeCount; i++) {\n  tree.insert(randomNumber())\n}\n\nconst container = document.getElementById('container')\nconst canvas = document.createElement('canvas')\ncontainer.appendChild(canvas)\n\nconst drawLine = function(ctx, center, tree) {\n  ctx.lineTo(center[0]-nodeWidth/2, center[1])\n  ctx.stroke()\n}\n\nconst drawNode = function(ctx, center, tree) {\n  ctx.save()\n  ctx.fillStyle = tree.meta.color || '#000000'\n  ctx.beginPath()\n  ctx.arc(center[0]-nodeWidth/2, center[1], nodeWidth, 0, 2 * Math.PI)\n  ctx.fill()\n  ctx.restore()\n}\n\nconst drawLabel = function(ctx, center, tree) {\n  ctx.save()\n  ctx.font = \"20px Arial\"\n  ctx.fillStyle = \"black\"\n  ctx.textAlign = \"center\"\n  ctx.fillText(tree.data, center[0]-nodeWidth/2, center[1]+nodeWidth/2)\n  ctx.restore()\n}\n\nconst drawTree = function(ctx, tree, center, fn) {\n  fn(ctx, center, tree)\n  ctx.moveTo(center[0]-nodeWidth/2, center[1])\n  const baseWidth = tree.width\n  var origin = center[0]-(baseWidth/2)\n  if (tree.children !== undefined) {\n    tree.children.forEach((child) => {\n      const childWidth = child.width\n      const childCenter = [origin+(childWidth/2), center[1]+verticalSpace]\n      ctx.moveTo(center[0]-nodeWidth/2, center[1])\n      drawTree(ctx, child, childCenter, fn)\n      origin = childCenter[0] + childWidth/2 + horizontalSpace\n    })\n  }\n}\n\nconst reload = function() {\n  const ctx = canvas.getContext('2d')\n  canvas.width = window.innerHeight * scale\n  canvas.height = window.innerHeight * scale\n  const origin = [ctx.canvas.width/2, 20]\n  drawTree(ctx, tree, origin, drawLine)\n  drawTree(ctx, tree, origin, drawNode)\n  drawTree(ctx, tree, origin, drawLabel)\n}\n\nwindow.onresize = reload\nwindow.onload = reload\n"]}