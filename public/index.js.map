{"version":3,"sources":["index.js"],"names":["randomNumber","Math","floor","random","compare","a","b","localeCompare","undefined","Tree","children","length","nodeWidth","sum","i","width","horizontalSpace","BinaryTree","data","parent","left","right","node","setRight","setLeft","newNode","Error","replaceSelfInParent","value","find","root","insert","nextNode","min","h","color","textColor","filter","v","sibling","max","red","black","RedBlackTree","uncle","grandparent","repair","n","p","g","rotateLeft","rotateRight","drawLine","ctx","center","tree","save","lineTo","stroke","restore","drawNode","meta","fillStyle","beginPath","arc","PI","fill","drawLabel","font","textAlign","fillText","drawTree","fn","moveTo","baseWidth","origin","forEach","child","childWidth","childCenter","verticalSpace","scale","nodeCount","treeSelect","document","getElementById","canvas","valueList","insertInput","insertSubmit","insertRandom","removeInput","removeSubmit","nukeSubmit","getContext","treeTypes","inserted","setType","event","type","init","TreeClass","redraw","draw","resize","height","innerHeight","ratio","style","innerWidth","innerHTML","join","intValue","parseInt","isNaN","push","insertRnd","newInt","remove","e","nuke","onchange","onclick","window","onresize","onload"],"mappings":"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","file":"index.js","sourcesContent":["const randomNumber = function() { return Math.floor(Math.random() * 100) }\n\nconst compare = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) { return 0 }\n    if (a < b) { return -1 }\n    if (a > b) { return 1 }\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a.localeCompare(b)\n  } else if (a.compare !== undefined && typeof a === typeof b) {\n    return a.compare(b)\n  }\n}\n\nclass Tree {\n  get width() {\n    if (this.children === undefined || this.children.length == 0) {\n      return nodeWidth\n    } else {\n      var sum = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        sum += this.children[i].width\n      }\n      return sum + (horizontalSpace * (this.children.length - 1))\n    }\n  }\n\n\n}\n\nclass BinaryTree extends Tree {\n  constructor(data, parent, left, right) {\n    super()\n    this.data = data\n    this.left = left\n    this.right = right\n    this.parent = parent\n  }\n\n  get meta() {\n    if (this.data !== undefined) {\n      var h = (this.data/100)*300\n      return {\n        color: `hsl(${h}, 100%, 50%)`,\n        textColor: 'white'\n      }\n    }\n  }\n\n  get root() {\n    if (this.parent === undefined) {\n      return this\n    } else {\n      return this.parent.root\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  get grandparent() {\n    if (this.parent) {\n      return this.parent.parent\n    } else {\n      return undefined\n    }\n  }\n\n  get sibling() {\n    if (this.parent.right === this) {\n      return this.parent.left\n    } else {\n      return this.parent.right\n    }\n  }\n\n  get uncle() {\n    return this.parent.sibling\n  }\n\n  get min() {\n    if (this.left === undefined) {\n      return this\n    } else {\n      return this.left.min\n    }\n  }\n\n  get max() {\n    if (this.right === undefined) {\n      return this\n    } else {\n      return this.right.max\n    }\n  }\n\n  setLeft(node) {\n    if (node) {\n      node.parent = this\n      this.left = node\n    } else {\n      this.left = undefined\n    }\n  }\n\n  setRight(node) {\n    if (node) {\n      node.parent = this\n      this.right = node\n    } else {\n      this.right = undefined\n    }\n  }\n\n  replaceSelfInParent(node) {\n    if (!this.parent) {\n      node.parent = undefined\n    } else if (this.parent.right && this.parent.right === this) {\n      this.parent.setRight(node)\n    } else {\n      this.parent.setLeft(node)\n    }\n  }\n\n  rotateLeft() {\n    var newNode = this.right\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setRight(newNode.left)\n    this.replaceSelfInParent(newNode)\n    newNode.setLeft(this)\n  }\n\n  rotateRight() {\n    var newNode = this.left\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setLeft(newNode.right)\n    this.replaceSelfInParent(newNode)\n    newNode.setRight(this)\n  }\n\n  find(value) {\n    switch (compare(value, this.data)) {\n      case -1:\n        return this.left.find(value)\n      case 0:\n        return this\n      case 1:\n        return this.right.find(value)\n    }\n  }\n\n  insert(value) {\n    if (this.data === undefined) {\n      this.data = value\n      return this\n    }\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left === undefined) {\n          this.left = new BinaryTree(value, this)\n          return this.root\n        } else {\n          return this.left.insert(value)\n        }\n        /* jshint -W086 */\n      case 0:\n        return this.root\n      case 1:\n        if (this.right === undefined) {\n          this.right = new BinaryTree(value, this)\n          return this.root\n        } else {\n          return this.right.insert(value)\n        }\n    }\n  }\n\n  remove(value) {\n    const node = this.find(value)\n    if (node !== undefined) {\n      var nextNode\n      if (node.left && node.right) {\n        nextNode = node.right.min\n        nextNode.replaceSelfInParent(nextNode.right || undefined)\n        node.data = nextNode.data\n      } else if (!node.left || !node.right) {\n        node.replaceSelfInParent(node.children[0])\n      } else {\n        node.replaceSelfInParent(undefined)\n      }\n      return this.root\n    }\n    return this.root\n  }\n\n}\n\nconst red = 'red'\nconst black = 'black'\n\nclass RedBlackTree extends BinaryTree {\n  constructor(data, color, parent, left, right) {\n    super(data, left, right)\n    this.color = color || black\n    this.parent = parent\n  }\n\n  get meta() {\n    return {\n      color: this.color,\n      textColor: 'white'\n    }\n  }\n\n  repair() {\n    if (this.parent === undefined) {\n      this.color = black\n      return this.root\n    } else if (this.parent.color === black) {\n      // all good\n      return this.root\n    } else if (this.uncle && this.uncle.color === red) {\n      this.parent.color = black\n      this.uncle.color = black\n      this.grandparent.color = red\n      return this.grandparent.repair()\n    } else {\n      var n = this\n      var p = n.parent\n      var g = n.grandparent\n      if (g) {\n        if (g.left && n === g.left.right) {\n          p.rotateLeft()\n          n = n.left\n        } else if (g.right && n === g.right.left) {\n          p.rotateRight()\n          n = n.right\n        }\n        p = n.parent\n        g = n.grandparent\n        if (n == p.left) {\n          g.rotateRight()\n        } else {\n          g.rotateLeft()\n        }\n        p.color = black\n        g.color = red\n      }\n      return this.root\n    }\n  }\n\n  insert(value) {\n    if (this.data === undefined) {\n      this.data = value\n      return this.root\n    }\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left !== undefined) {\n          return this.left.insert(value)\n        } else {\n          this.left = new RedBlackTree(value, red, this)\n          return this.left.repair()\n        }\n        /* jshint -W086 */\n      case 0:\n        return this.root\n      case 1:\n        if (this.right !== undefined) {\n          return this.right.insert(value)\n        } else {\n          this.right = new RedBlackTree(value, red, this)\n          return this.right.repair()\n        }\n    }\n  }\n\n  remove(value) {\n    // no-op\n  }\n\n}\n\nconst drawLine = function(ctx, center, tree) {\n  ctx.save()\n  ctx.lineTo(center[0]-nodeWidth/2, center[1])\n  ctx.stroke()\n  ctx.restore()\n}\n\nconst drawNode = function(ctx, center, tree) {\n  ctx.save()\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.color || '#000000'\n  }\n  ctx.beginPath()\n  ctx.arc(center[0]-nodeWidth/2, center[1], nodeWidth, 0, 2 * Math.PI)\n  ctx.fill()\n  ctx.fillStyle = 'black'\n  ctx.stroke()\n  ctx.restore()\n}\n\nconst drawLabel = function(ctx, center, tree) {\n  ctx.save()\n  ctx.font = \"20px sans-serif\"\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.textColor\n  }\n  ctx.textAlign = \"center\"\n  ctx.fillText(tree.data, center[0]-nodeWidth/2, center[1]+nodeWidth/2)\n  ctx.restore()\n}\n\nconst drawTree = function(ctx, tree, center, fn) {\n  if (tree.data === undefined) return\n  ctx.save()\n  fn(ctx, center, tree)\n  ctx.moveTo(center[0]-nodeWidth/2, center[1])\n  const baseWidth = tree.width\n  var origin = center[0]-(baseWidth/2)\n  if (tree.children !== undefined) {\n    tree.children.forEach((child) => {\n      ctx.save()\n      const childWidth = child.width\n      const childCenter = [origin+(childWidth/2), center[1]+verticalSpace]\n      ctx.moveTo(center[0]-nodeWidth/2, center[1])\n      drawTree(ctx, child, childCenter, fn)\n      origin = childCenter[0] + childWidth/2 + horizontalSpace\n      ctx.restore()\n    })\n  }\n  ctx.restore()\n}\n\nconst scale = 1.0\nconst nodeWidth = 15 * scale\nconst horizontalSpace = 50 * scale\nconst verticalSpace = 50 * scale\nconst nodeCount = 30\n\nconst treeSelect = document.getElementById('tree-select')\nconst canvas = document.getElementById('canvas')\nconst valueList = document.getElementById('value-list')\nconst insertInput = document.getElementById('insert-input')\nconst insertSubmit = document.getElementById('insert-submit')\nconst insertRandom = document.getElementById('insert-random')\nconst removeInput = document.getElementById('remove-input')\nconst removeSubmit = document.getElementById('remove-submit')\nconst nukeSubmit = document.getElementById('nuke-submit')\n\nconst ctx = canvas.getContext('2d')\n\nconst treeTypes = {\n  'bst': BinaryTree,\n  'rbt': RedBlackTree\n}\n\nvar inserted\nvar tree\n\nconst setType = function(event) {\n  const type = treeSelect.value\n  init(treeTypes[type])\n}\n\nconst init = function(TreeClass) {\n  inserted = []\n  tree = new TreeClass()\n  redraw()\n}\n\nconst draw = function() {\n  const origin = [ctx.canvas.width/2, 20]\n  drawTree(ctx, tree, origin, drawLine)\n  drawTree(ctx, tree, origin, drawNode)\n  drawTree(ctx, tree, origin, drawLabel)\n}\n\nconst resize = function() {\n  const height = innerHeight * 0.75\n  const ratio = canvas.width/canvas.height\n  const width = height * ratio\n  canvas.style.width = width + 'px'\n  canvas.style.height = height + 'px'\n}\n\nconst redraw = function() {\n  canvas.width = innerWidth * scale\n  canvas.height = innerHeight * scale\n  valueList.innerHTML = \"[\" + inserted.join(', ') + \"]\"\n  draw()\n}\n\nconst insert = function(event) {\n  const value = insertInput.value\n  const intValue = parseInt(value)\n  if (value !== undefined && !isNaN(intValue)) {\n    inserted.push(intValue)\n    tree = tree.insert(intValue)\n    redraw()\n  }\n}\n\nconst insertRnd = function(event) {\n  const newInt = randomNumber()\n  inserted.push(newInt)\n  tree = tree.insert(newInt)\n  redraw()\n}\n\nconst remove = function() {\n  const value = removeInput.value\n  const intValue = parseInt(value)\n  if (value !== undefined && !isNaN(intValue)) {\n    inserted.filter(e => e !== intValue)\n    tree = tree.remove(intValue)\n    redraw()\n  }\n}\n\nconst nuke = function(event) {\n  init(treeTypes[treeSelect.value])\n}\n\ninit(BinaryTree)\n\ntreeSelect.onchange = setType\ninsertSubmit.onclick = insert\ninsertRandom.onclick = insertRnd\nremoveSubmit.onclick = remove\nnukeSubmit.onclick = nuke\nwindow.onresize = resize\nwindow.onload = resize\n\n"]}