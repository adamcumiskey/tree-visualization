{"version":3,"sources":["index.js","tree.js"],"names":["nodeWidth","horizontalSpace","verticalSpace","Tree","data","children","undefined","length","sum","i","width","tree","canvas","document","getElementById","ctx","getContext","origin","drawNode","center","lineTo","stroke","beginPath","arc","Math","PI","fill","drawTree","moveTo","baseWidth","forEach","child","childWidth","childCenter"],"mappings":"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","file":"index.js","sourcesContent":["const nodeWidth = 15\nconst horizontalSpace = 50\nconst verticalSpace = 50\n\nclass Tree {\n  constructor(data, children) {\n    this.data = data\n    this.children = children\n  }\n\n  get width() {\n    if (this.children === undefined || this.children.length == 0) {\n      return nodeWidth\n    } else {\n      var sum = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        sum += this.children[i].width\n      }\n      return sum + (horizontalSpace * (this.children.length - 1))\n    }\n  }\n\n}\n\nconst tree = new Tree(\n  5,\n  [new Tree(6, [new Tree(10), new Tree(5), new Tree(1)]),\n  new Tree(8, [new Tree(10), new Tree(1)]),\n  new Tree(10, [new Tree(10), new Tree(15), new Tree(18, [new Tree(5)])])]\n)\n\nconst canvas = document.getElementById('canvas')\nconst ctx = canvas.getContext('2d')\nconst origin = [ctx.canvas.width/2, 40]\n\nconst drawNode = function(ctx, center) {\n  ctx.lineTo(center[0]-nodeWidth/2, center[1])\n  ctx.stroke()\n  ctx.beginPath()\n  ctx.arc(center[0]-nodeWidth/2, center[1], nodeWidth, 0, 2 * Math.PI)\n  ctx.fill()\n}\n\nconst drawTree = function(ctx, tree, center) {\n  drawNode(ctx, center)\n  ctx.moveTo(center[0]-nodeWidth/2, center[1])\n  const baseWidth = tree.width\n  var origin = center[0]-(baseWidth/2)\n  if (tree.children !== undefined) {\n    tree.children.forEach((child) => {\n      const childWidth = child.width\n      const childCenter = [origin+(childWidth/2), center[1]+verticalSpace]\n      ctx.moveTo(center[0]-nodeWidth/2, center[1])\n      drawTree(ctx, child, childCenter)\n      origin = childCenter[0] + childWidth/2 + horizontalSpace\n    })\n  }\n}\n\ndrawTree(ctx, tree, origin)\n\n",""]}