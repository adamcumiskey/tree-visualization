{"version":3,"sources":["index.js"],"names":["scale","nodeWidth","horizontalSpace","verticalSpace","Tree","data","children","undefined","length","sum","i","width","tree","container","document","getElementById","canvas","createElement","window","innerWidth","height","innerHeight","style","appendChild","drawNode","ctx","center","text","lineTo","stroke","beginPath","arc","Math","PI","fill","save","font","fillStyle","textAlign","fillText","restore","drawTree","moveTo","baseWidth","origin","forEach","child","childWidth","childCenter","reload","getContext","onresize","onload"],"mappings":"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","file":"index.js","sourcesContent":["const scale = 1.0\nconst nodeWidth = 15 * scale\nconst horizontalSpace = 50 * scale\nconst verticalSpace = 50 * scale\n\nclass Tree {\n  constructor(data, children) {\n    this.data = data\n    this.children = children\n  }\n\n  get width() {\n    if (this.children === undefined || this.children.length == 0) {\n      return nodeWidth\n    } else {\n      var sum = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        sum += this.children[i].width\n      }\n      return sum + (horizontalSpace * (this.children.length - 1))\n    }\n  }\n\n}\n\nconst tree = new Tree(\n  5,\n  [new Tree(6, [new Tree(10), new Tree(5), new Tree(1)]),\n  new Tree(8, [new Tree(10), new Tree(1)]),\n  new Tree(10, [new Tree(10), new Tree(15), new Tree(18, [new Tree(5)])])]\n)\n\nconst container = document.getElementById('container')\nvar canvas = document.createElement(\n  'canvas',\n  {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    style: 'width=100%; height=100%;'\n  }\n)\ncontainer.appendChild(canvas)\n\nconst drawNode = function(ctx, center, text) {\n  ctx.lineTo(center[0]-nodeWidth/2, center[1])\n  ctx.stroke()\n\n  ctx.beginPath()\n  ctx.arc(center[0]-nodeWidth/2, center[1], nodeWidth, 0, 2 * Math.PI)\n  ctx.fill()\n\n  ctx.save()\n  ctx.font = \"20px Arial\"\n  ctx.fillStyle = \"white\"\n  ctx.textAlign = \"center\"\n  ctx.fillText(text, center[0]-nodeWidth/2, center[1]+nodeWidth/2)\n  ctx.restore()\n}\n\nconst drawTree = function(ctx, tree, center) {\n  drawNode(ctx, center, tree.data)\n  ctx.moveTo(center[0]-nodeWidth/2, center[1])\n  const baseWidth = tree.width\n  var origin = center[0]-(baseWidth/2)\n  if (tree.children !== undefined) {\n    tree.children.forEach((child) => {\n      const childWidth = child.width\n      const childCenter = [origin+(childWidth/2), center[1]+verticalSpace]\n      ctx.moveTo(center[0]-nodeWidth/2, center[1])\n      drawTree(ctx, child, childCenter, child.data)\n      origin = childCenter[0] + childWidth/2 + horizontalSpace\n    })\n  }\n}\n\nconst reload = function() {\n  const ctx = canvas.getContext('2d')\n  canvas.width = window.innerHeight * scale\n  canvas.height = window.innerHeight * scale\n  const origin = [ctx.canvas.width/2, 40]\n  drawTree(ctx, tree, origin)\n}\n\nwindow.onresize = reload\nwindow.onload = reload\n"]}