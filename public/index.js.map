{"version":3,"sources":["index.js"],"names":["scale","nodeWidth","horizontalSpace","verticalSpace","compare","a","b","localeCompare","undefined","Tree","children","length","sum","i","width","BinaryTree","data","left","right","meta","h","color","textColor","value","find","insert","filter","v","red","black","RedBlackTree","parent","node","setRight","setLeft","newNode","Error","replaceSelfInParent","setColor","root","uncle","grandparent","repair","p","g","rotateLeft","rotateRight","inserted","sibling","drawLine","ctx","center","tree","lineTo","stroke","drawNode","save","fillStyle","beginPath","arc","Math","PI","fill","restore","drawLabel","font","textAlign","fillText","drawTree","fn","moveTo","baseWidth","origin","forEach","child","childWidth","childCenter","nodeCount","delay","randomNumber","floor","random","container","document","getElementById","canvas","createElement","getContext","appendChild","draw","drawnNodes","reload","innerHeight","height","setTimeout","window","onresize","onload"],"mappings":"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","file":"index.js","sourcesContent":["const scale = 1.0\nconst nodeWidth = 15 * scale\nconst horizontalSpace = 50 * scale\nconst verticalSpace = 50 * scale\n\nconst compare = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) { return 0 }\n    if (a < b) { return -1 }\n    if (a > b) { return 1 }\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a.localeCompare(b)\n  } else if (a.compare !== undefined && typeof a === typeof b) {\n    return a.compare(b)\n  }\n}\n\nclass Tree {\n  get width() {\n    if (this.children === undefined || this.children.length == 0) {\n      return nodeWidth\n    } else {\n      var sum = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        sum += this.children[i].width\n      }\n      return sum + (horizontalSpace * (this.children.length - 1))\n    }\n  }\n\n}\n\nclass BinaryTree extends Tree {\n  constructor(data, left, right) {\n    super()\n    this.data = data\n    this.left = left\n    this.right = right\n\n    if (typeof data === 'number') {\n      this.meta = {}\n      var h = (data/100)*300\n      this.meta.color = `hsl(${h}, 100%, 50%)`\n      this.meta.textColor = 'white'\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  find(value) {\n    switch (compare(value, this.data)) {\n      case -1:\n        return this.left.find(value)\n      case 0:\n        return this\n      case 1:\n        return this.right.find(value)\n    }\n  }\n\n  insert(value) {\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left === undefined) {\n          this.left = new BinaryTree(value)\n        } else {\n          this.left.insert(value)\n        }\n        break\n      case 1:\n        if (this.right === undefined) {\n          this.right = new BinaryTree(value)\n        } else {\n          this.right.insert(value)\n        }\n        break\n    }\n  }\n\n}\n\nconst red = 'red'\nconst black = 'black'\n\nclass RedBlackTree extends BinaryTree {\n  constructor(data, color, parent, left, right) {\n    super(data, left, right)\n    this.color = color || black\n    this.parent = parent\n\n    this.meta = {\n      color: this.color,\n      textColor: 'white'\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  get root() {\n    if (this.parent) {\n      return this.parent.root\n    } else {\n      return this\n    }\n  }\n\n  get grandparent() {\n    if (this.parent) {\n      return this.parent.parent\n    } else {\n      return undefined\n    }\n  }\n\n  get sibling() {\n    if (this.parent.right === this) {\n      return this.parent.left\n    } else {\n      return this.parent.right\n    }\n  }\n\n  get uncle() {\n    return this.parent.sibling\n  }\n\n  setLeft(node) {\n    if (node) {\n      node.parent = this\n      this.left = node\n    } else {\n      this.left = undefined\n    }\n  }\n\n  setRight(node) {\n    if (node) {\n      node.parent = this\n      this.right = node\n    } else {\n      this.right = undefined\n    }\n  }\n\n  replaceSelfInParent(node) {\n    if (!this.parent) {\n      node.parent = undefined\n    } else if (this.parent.right && this.parent.right === this) {\n      this.parent.setRight(node)\n    } else {\n      this.parent.setLeft(node)\n    }\n  }\n\n  setColor(color) {\n    this.color = color\n    this.meta.color = color\n  }\n\n  rotateLeft() {\n    var newNode = this.right\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setRight(newNode.left)\n    this.replaceSelfInParent(newNode)\n    newNode.setLeft(this)\n  }\n\n  rotateRight() {\n    var newNode = this.left\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setLeft(newNode.right)\n    this.replaceSelfInParent(newNode)\n    newNode.setRight(this)\n  }\n\n  repair() {\n    if (this.parent === undefined) {\n      this.setColor(black)\n      return this.root\n    } else if (this.parent.color === black) {\n      // all good\n      return this.root\n    } else if (this.uncle && this.uncle.color === red) {\n      this.parent.setColor(black)\n      this.uncle.setColor(black)\n      this.grandparent.setColor(red)\n      return this.grandparent.repair()\n    } else {\n      var p = this.parent\n      var g = this.grandparent\n      if (g) {\n        if (g.left && this === g.left.right) {\n          p.rotateLeft()\n        } else if (g.right && this === g.right.left) {\n          p.rotateRight()\n        }\n        if (p === this.left) {\n          g.rotateRight()\n        } else {\n          g.rotateLeft()\n        }\n        this.setColor(black)\n        g.setColor(red)\n      }\n      return this.root\n    }\n  }\n\n  insert(value) {\n    var inserted;\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left !== undefined) {\n          return this.left.insert(value)\n        } else {\n          this.left = new RedBlackTree(value, red, this)\n          return this.left.repair()\n        }\n      case 0:\n        return this.root\n      case 1:\n        if (this.right !== undefined) {\n          return this.right.insert(value)\n        } else {\n          this.right = new RedBlackTree(value, red, this)\n          return this.right.repair()\n        }\n    }\n  }\n\n}\n\n\nconst drawLine = function(ctx, center, tree) {\n  ctx.lineTo(center[0]-nodeWidth/2, center[1])\n  ctx.stroke()\n}\n\nconst drawNode = function(ctx, center, tree) {\n  ctx.save()\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.color || '#000000'\n  }\n  ctx.beginPath()\n  ctx.arc(center[0]-nodeWidth/2, center[1], nodeWidth, 0, 2 * Math.PI)\n  ctx.fill()\n  ctx.fillStyle = 'black'\n  ctx.stroke()\n  ctx.restore()\n}\n\nconst drawLabel = function(ctx, center, tree) {\n  ctx.save()\n  ctx.font = \"20px sans-serif\"\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.textColor\n  }\n  ctx.textAlign = \"center\"\n  ctx.fillText(tree.data, center[0]-nodeWidth/2, center[1]+nodeWidth/2)\n  ctx.restore()\n}\n\nconst drawTree = function(ctx, tree, center, fn) {\n  fn(ctx, center, tree)\n  ctx.moveTo(center[0]-nodeWidth/2, center[1])\n  const baseWidth = tree.width\n  var origin = center[0]-(baseWidth/2)\n  if (tree.children !== undefined) {\n    tree.children.forEach((child) => {\n      const childWidth = child.width\n      const childCenter = [origin+(childWidth/2), center[1]+verticalSpace]\n      ctx.moveTo(center[0]-nodeWidth/2, center[1])\n      drawTree(ctx, child, childCenter, fn)\n      origin = childCenter[0] + childWidth/2 + horizontalSpace\n    })\n  }\n}\n\nconst nodeCount = 30\nconst delay = 1000\nconst randomNumber = function() { return Math.floor(Math.random() * 100) }\nconst container = document.getElementById('container')\nconst canvas = document.createElement('canvas')\nconst ctx = canvas.getContext('2d')\ncontainer.appendChild(canvas)\n\nconst draw = function() {\n  const origin = [ctx.canvas.width/2, 20]\n  drawTree(ctx, tree, origin, drawLine)\n  drawTree(ctx, tree, origin, drawNode)\n  drawTree(ctx, tree, origin, drawLabel)\n}\n\nvar drawnNodes = 0\nvar tree = new RedBlackTree(randomNumber())\n\nconst reload = function() {\n  canvas.width = innerHeight * scale\n  canvas.height = innerHeight * scale\n  draw()\n\n  if (drawnNodes < nodeCount) {\n    tree = tree.insert(randomNumber())\n    drawnNodes++\n    setTimeout(reload, delay)\n  }\n}\n\nwindow.onresize = reload\nwindow.onload = reload\n"]}