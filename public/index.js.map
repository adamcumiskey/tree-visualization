{"version":3,"sources":["index.js"],"names":["randomNumber","Math","floor","random","compare","a","b","localeCompare","undefined","Tree","children","length","nodeWidth","sum","i","width","horizontalSpace","BinaryTree","data","parent","left","right","value","find","root","insert","h","color","textColor","filter","v","red","black","RedBlackTree","node","setRight","setLeft","newNode","Error","replaceSelfInParent","uncle","grandparent","repair","n","p","g","rotateLeft","rotateRight","sibling","drawLine","ctx","center","tree","lineTo","stroke","drawNode","save","meta","fillStyle","beginPath","arc","PI","fill","restore","drawLabel","font","textAlign","fillText","drawTree","fn","moveTo","baseWidth","origin","forEach","child","childWidth","childCenter","verticalSpace","scale","nodeCount","treeSelect","document","getElementById","canvas","valueList","insertInput","insertSubmit","insertRandom","nukeSubmit","getContext","treeTypes","inserted","setType","event","type","init","TreeClass","redraw","draw","innerHeight","height","innerHTML","join","parseInt","push","insertRnd","newInt","nuke","onchange","onclick","window","onresize","onload"],"mappings":"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","file":"index.js","sourcesContent":["const randomNumber = function() { return Math.floor(Math.random() * 100) }\n\nconst compare = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) { return 0 }\n    if (a < b) { return -1 }\n    if (a > b) { return 1 }\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a.localeCompare(b)\n  } else if (a.compare !== undefined && typeof a === typeof b) {\n    return a.compare(b)\n  }\n}\n\nclass Tree {\n  get width() {\n    if (this.children === undefined || this.children.length == 0) {\n      return nodeWidth\n    } else {\n      var sum = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        sum += this.children[i].width\n      }\n      return sum + (horizontalSpace * (this.children.length - 1))\n    }\n  }\n\n}\n\nclass BinaryTree extends Tree {\n  constructor(data, parent, left, right) {\n    super()\n    this.data = data\n    this.left = left\n    this.right = right\n    this.parent = parent\n  }\n\n  get meta() {\n    if (this.data !== undefined) {\n      var h = (this.data/100)*300\n      return {\n        color: `hsl(${h}, 100%, 50%)`,\n        textColor: 'white'\n      }\n    }\n  }\n\n  get root() {\n    if (this.parent === undefined) {\n      return this\n    } else {\n      return this.parent.root\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  find(value) {\n    switch (compare(value, this.data)) {\n      case -1:\n        return this.left.find(value)\n      case 0:\n        return this\n      case 1:\n        return this.right.find(value)\n    }\n  }\n\n  insert(value) {\n    if (this.data === undefined) {\n      this.data = value\n      return this\n    }\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left === undefined) {\n          this.left = new BinaryTree(value, this)\n          return this.root\n        } else {\n          return this.left.insert(value)\n        }\n        /* jshint -W086 */\n      case 0:\n        return this.root\n      case 1:\n        if (this.right === undefined) {\n          this.right = new BinaryTree(value, this)\n          return this.root\n        } else {\n          return this.right.insert(value)\n        }\n    }\n  }\n\n}\n\nconst red = 'red'\nconst black = 'black'\n\nclass RedBlackTree extends BinaryTree {\n  constructor(data, color, parent, left, right) {\n    super(data, left, right)\n    this.color = color || black\n    this.parent = parent\n  }\n\n  get meta() {\n    return {\n      color: this.color,\n      textColor: 'white'\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  get root() {\n    if (this.parent) {\n      return this.parent.root\n    } else {\n      return this\n    }\n  }\n\n  get grandparent() {\n    if (this.parent) {\n      return this.parent.parent\n    } else {\n      return undefined\n    }\n  }\n\n  get sibling() {\n    if (this.parent.right === this) {\n      return this.parent.left\n    } else {\n      return this.parent.right\n    }\n  }\n\n  get uncle() {\n    return this.parent.sibling\n  }\n\n  setLeft(node) {\n    if (node) {\n      node.parent = this\n      this.left = node\n    } else {\n      this.left = undefined\n    }\n  }\n\n  setRight(node) {\n    if (node) {\n      node.parent = this\n      this.right = node\n    } else {\n      this.right = undefined\n    }\n  }\n\n  replaceSelfInParent(node) {\n    if (!this.parent) {\n      node.parent = undefined\n    } else if (this.parent.right && this.parent.right === this) {\n      this.parent.setRight(node)\n    } else {\n      this.parent.setLeft(node)\n    }\n  }\n\n  rotateLeft() {\n    var newNode = this.right\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setRight(newNode.left)\n    this.replaceSelfInParent(newNode)\n    newNode.setLeft(this)\n  }\n\n  rotateRight() {\n    var newNode = this.left\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setLeft(newNode.right)\n    this.replaceSelfInParent(newNode)\n    newNode.setRight(this)\n  }\n\n  repair() {\n    if (this.parent === undefined) {\n      this.color = black\n      return this.root\n    } else if (this.parent.color === black) {\n      // all good\n      return this.root\n    } else if (this.uncle && this.uncle.color === red) {\n      this.parent.color = black\n      this.uncle.color = black\n      this.grandparent.color = red\n      return this.grandparent.repair()\n    } else {\n      var n = this\n      var p = n.parent\n      var g = n.grandparent\n      if (g) {\n        if (g.left && n === g.left.right) {\n          p.rotateLeft()\n          n = n.left\n        } else if (g.right && n === g.right.left) {\n          p.rotateRight()\n          n = n.right\n        }\n        p = n.parent\n        g = n.grandparent\n        if (n == p.left) {\n          g.rotateRight()\n        } else {\n          g.rotateLeft()\n        }\n        p.color = black\n        g.color = red\n      }\n      return this.root\n    }\n  }\n\n  insert(value) {\n    if (this.data === undefined) {\n      this.data = value\n      return this.root\n    }\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left !== undefined) {\n          return this.left.insert(value)\n        } else {\n          this.left = new RedBlackTree(value, red, this)\n          return this.left.repair()\n        }\n        /* jshint -W086 */\n      case 0:\n        return this.root\n      case 1:\n        if (this.right !== undefined) {\n          return this.right.insert(value)\n        } else {\n          this.right = new RedBlackTree(value, red, this)\n          return this.right.repair()\n        }\n    }\n  }\n\n}\n\nconst drawLine = function(ctx, center, tree) {\n  ctx.lineTo(center[0]-nodeWidth/2, center[1])\n  ctx.stroke()\n}\n\nconst drawNode = function(ctx, center, tree) {\n  ctx.save()\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.color || '#000000'\n  }\n  ctx.beginPath()\n  ctx.arc(center[0]-nodeWidth/2, center[1], nodeWidth, 0, 2 * Math.PI)\n  ctx.fill()\n  ctx.fillStyle = 'black'\n  ctx.stroke()\n  ctx.restore()\n}\n\nconst drawLabel = function(ctx, center, tree) {\n  ctx.save()\n  ctx.font = \"20px sans-serif\"\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.textColor\n  }\n  ctx.textAlign = \"center\"\n  ctx.fillText(tree.data, center[0]-nodeWidth/2, center[1]+nodeWidth/2)\n  ctx.restore()\n}\n\nconst drawTree = function(ctx, tree, center, fn) {\n  if (tree.data === undefined) return\n  fn(ctx, center, tree)\n  ctx.moveTo(center[0]-nodeWidth/2, center[1])\n  const baseWidth = tree.width\n  var origin = center[0]-(baseWidth/2)\n  if (tree.children !== undefined) {\n    tree.children.forEach((child) => {\n      const childWidth = child.width\n      const childCenter = [origin+(childWidth/2), center[1]+verticalSpace]\n      ctx.moveTo(center[0]-nodeWidth/2, center[1])\n      drawTree(ctx, child, childCenter, fn)\n      origin = childCenter[0] + childWidth/2 + horizontalSpace\n    })\n  }\n}\n\nconst scale = 1.0\nconst nodeWidth = 15 * scale\nconst horizontalSpace = 50 * scale\nconst verticalSpace = 50 * scale\nconst nodeCount = 30\n\nconst treeSelect = document.getElementById('tree-select')\nconst canvas = document.getElementById('canvas')\nconst valueList = document.getElementById('value-list')\nconst insertInput = document.getElementById('insert-input')\nconst insertSubmit = document.getElementById('insert-submit')\nconst insertRandom = document.getElementById('insert-random')\nconst nukeSubmit = document.getElementById('nuke-submit')\n\nconst ctx = canvas.getContext('2d')\n\nconst treeTypes = {\n  'bst': BinaryTree,\n  'rbt': RedBlackTree\n}\n\nvar inserted\nvar tree\n\nconst setType = function(event) {\n  const type = treeSelect.value\n  init(treeTypes[type])\n}\n\nconst init = function(TreeClass) {\n  inserted = []\n  tree = new TreeClass()\n  redraw()\n}\n\nconst draw = function() {\n  const origin = [ctx.canvas.width/2, 20]\n  drawTree(ctx, tree, origin, drawLine)\n  drawTree(ctx, tree, origin, drawNode)\n  drawTree(ctx, tree, origin, drawLabel)\n}\n\nconst redraw = function() {\n  canvas.width = innerHeight * scale\n  canvas.height = innerHeight * scale\n  valueList.innerHTML = \"[\" + inserted.join(', ') + \"]\"\n  draw()\n}\n\nconst insert = function(event) {\n  const value = parseInt(insertInput.value)\n  if (value !== undefined) {\n    inserted.push(value)\n    tree = tree.insert(value)\n    redraw()\n  }\n}\n\nconst insertRnd = function(event) {\n  const newInt = randomNumber()\n  inserted.push(newInt)\n  tree = tree.insert(newInt)\n  redraw()\n}\n\nconst nuke = function(event) {\n  init(treeTypes[treeSelect.value])\n}\n\ninit(BinaryTree)\n\ntreeSelect.onchange = setType\ninsertSubmit.onclick = insert\ninsertRandom.onclick = insertRnd\nnukeSubmit.onclick = nuke\nwindow.onresize = redraw\nwindow.onload = redraw\n\n"]}