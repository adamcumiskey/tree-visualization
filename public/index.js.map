{"version":3,"sources":["index.js"],"names":["randomNumber","Math","floor","random","compare","a","b","localeCompare","undefined","Tree","children","length","nodeWidth","sum","i","width","horizontalSpace","BinaryTree","data","left","right","setData","meta","h","color","textColor","value","find","root","insert","filter","v","red","black","RedBlackTree","parent","node","setRight","setLeft","newNode","Error","replaceSelfInParent","setColor","uncle","grandparent","repair","n","p","g","rotateLeft","rotateRight","self","sibling","drawLine","ctx","center","tree","lineTo","stroke","drawNode","save","fillStyle","beginPath","arc","PI","fill","restore","drawLabel","font","textAlign","fillText","drawTree","fn","moveTo","baseWidth","origin","forEach","child","childWidth","childCenter","verticalSpace","scale","nodeCount","canvas","document","getElementById","valueList","insertInput","insertSubmit","insertRandom","nukeSubmit","getContext","inserted","init","draw","redraw","innerHeight","height","innerHTML","join","event","parseInt","push","insertRnd","newInt","nuke","onclick","window","onresize","onload"],"mappings":"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","file":"index.js","sourcesContent":["const randomNumber = function() { return Math.floor(Math.random() * 100) }\n\nconst compare = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) { return 0 }\n    if (a < b) { return -1 }\n    if (a > b) { return 1 }\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a.localeCompare(b)\n  } else if (a.compare !== undefined && typeof a === typeof b) {\n    return a.compare(b)\n  }\n}\n\nclass Tree {\n  get width() {\n    if (this.children === undefined || this.children.length == 0) {\n      return nodeWidth\n    } else {\n      var sum = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        sum += this.children[i].width\n      }\n      return sum + (horizontalSpace * (this.children.length - 1))\n    }\n  }\n\n}\n\nclass BinaryTree extends Tree {\n  constructor(data, left, right) {\n    super()\n    this.left = left\n    this.right = right\n    this.setData(data)\n  }\n\n  setData(data) {\n    this.data = data\n    if (typeof data === 'number') {\n      this.meta = {}\n      var h = (data/100)*300\n      this.meta.color = `hsl(${h}, 100%, 50%)`\n      this.meta.textColor = 'white'\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  find(value) {\n    switch (compare(value, this.data)) {\n      case -1:\n        return this.left.find(value)\n      case 0:\n        return this\n      case 1:\n        return this.right.find(value)\n    }\n  }\n\n  insert(value) {\n    if (!this.data) {\n      this.setData(value)\n      return\n    }\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left === undefined) {\n          this.left = new BinaryTree(value)\n          return this.root\n        } else {\n          return this.left.insert(value)\n        }\n        break\n      case 0:\n        return this.root\n      case 1:\n        if (this.right === undefined) {\n          this.right = new BinaryTree(value)\n          return this.root\n        } else {\n          return this.right.insert(value)\n        }\n        break\n    }\n  }\n\n}\n\nconst red = 'red'\nconst black = 'black'\n\nclass RedBlackTree extends BinaryTree {\n  constructor(data, color, parent, left, right) {\n    super(data, left, right)\n    this.color = color || black\n    this.parent = parent\n\n    this.meta = {\n      color: this.color,\n      textColor: 'white'\n    }\n  }\n\n  get children() {\n    return [this.left, this.right].filter(v => v !== undefined)\n  }\n\n  get root() {\n    if (this.parent) {\n      return this.parent.root\n    } else {\n      return this\n    }\n  }\n\n  get grandparent() {\n    if (this.parent) {\n      return this.parent.parent\n    } else {\n      return undefined\n    }\n  }\n\n  get sibling() {\n    if (this.parent.right === this) {\n      return this.parent.left\n    } else {\n      return this.parent.right\n    }\n  }\n\n  get uncle() {\n    return this.parent.sibling\n  }\n\n  setLeft(node) {\n    if (node) {\n      node.parent = this\n      this.left = node\n    } else {\n      this.left = undefined\n    }\n  }\n\n  setRight(node) {\n    if (node) {\n      node.parent = this\n      this.right = node\n    } else {\n      this.right = undefined\n    }\n  }\n\n  replaceSelfInParent(node) {\n    if (!this.parent) {\n      node.parent = undefined\n    } else if (this.parent.right && this.parent.right === this) {\n      this.parent.setRight(node)\n    } else {\n      this.parent.setLeft(node)\n    }\n  }\n\n  setColor(color) {\n    this.color = color\n    this.meta.color = color\n  }\n\n  rotateLeft() {\n    var newNode = this.right\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setRight(newNode.left)\n    this.replaceSelfInParent(newNode)\n    newNode.setLeft(this)\n  }\n\n  rotateRight() {\n    var newNode = this.left\n    if (newNode === undefined) {\n      throw new Error('Cannot set leaf as internal node')\n    }\n    this.setLeft(newNode.right)\n    this.replaceSelfInParent(newNode)\n    newNode.setRight(this)\n  }\n\n  repair() {\n    if (this.parent === undefined) {\n      this.setColor(black)\n      return this.root\n    } else if (this.parent.color === black) {\n      // all good\n      return this.root\n    } else if (this.uncle && this.uncle.color === red) {\n      this.parent.setColor(black)\n      this.uncle.setColor(black)\n      this.grandparent.setColor(red)\n      return this.grandparent.repair()\n    } else {\n      var n = this\n      var p = n.parent\n      var g = n.grandparent\n      if (g) {\n        if (g.left && n === g.left.right) {\n          p.rotateLeft()\n          n = n.left\n        } else if (g.right && n === g.right.left) {\n          p.rotateRight()\n          n = n.right\n        }\n        p = n.parent\n        g = n.grandparent\n        if (n == p.left) {\n          g.rotateRight()\n        } else {\n          g.rotateLeft()\n        }\n        p.setColor(black)\n        g.setColor(red)\n      }\n      return this.root\n    }\n  }\n\n  insert(value) {\n    if (!self.data) {\n      self.data = value\n      return this.root\n    }\n    switch (compare(value, this.data)) {\n      case -1:\n        if (this.left !== undefined) {\n          return this.left.insert(value)\n        } else {\n          this.left = new RedBlackTree(value, red, this)\n          return this.left.repair()\n        }\n        /* jshint -W086 */\n      case 0:\n        return this.root\n      case 1:\n        if (this.right !== undefined) {\n          return this.right.insert(value)\n        } else {\n          this.right = new RedBlackTree(value, red, this)\n          return this.right.repair()\n        }\n    }\n  }\n\n}\n\nconst drawLine = function(ctx, center, tree) {\n  ctx.lineTo(center[0]-nodeWidth/2, center[1])\n  ctx.stroke()\n}\n\nconst drawNode = function(ctx, center, tree) {\n  ctx.save()\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.color || '#000000'\n  }\n  ctx.beginPath()\n  ctx.arc(center[0]-nodeWidth/2, center[1], nodeWidth, 0, 2 * Math.PI)\n  ctx.fill()\n  ctx.fillStyle = 'black'\n  ctx.stroke()\n  ctx.restore()\n}\n\nconst drawLabel = function(ctx, center, tree) {\n  ctx.save()\n  ctx.font = \"20px sans-serif\"\n  if (tree.meta) {\n    ctx.fillStyle = tree.meta.textColor\n  }\n  ctx.textAlign = \"center\"\n  ctx.fillText(tree.data, center[0]-nodeWidth/2, center[1]+nodeWidth/2)\n  ctx.restore()\n}\n\nconst drawTree = function(ctx, tree, center, fn) {\n  if (!tree.data) return\n  fn(ctx, center, tree)\n  ctx.moveTo(center[0]-nodeWidth/2, center[1])\n  const baseWidth = tree.width\n  var origin = center[0]-(baseWidth/2)\n  if (tree.children !== undefined) {\n    tree.children.forEach((child) => {\n      const childWidth = child.width\n      const childCenter = [origin+(childWidth/2), center[1]+verticalSpace]\n      ctx.moveTo(center[0]-nodeWidth/2, center[1])\n      drawTree(ctx, child, childCenter, fn)\n      origin = childCenter[0] + childWidth/2 + horizontalSpace\n    })\n  }\n}\n\nconst scale = 1.0\nconst nodeWidth = 15 * scale\nconst horizontalSpace = 50 * scale\nconst verticalSpace = 50 * scale\nconst nodeCount = 30\n\nconst canvas = document.getElementById('canvas')\nconst valueList = document.getElementById('value-list')\nconst insertInput = document.getElementById('insert-input')\nconst insertSubmit = document.getElementById('insert-submit')\nconst insertRandom = document.getElementById('insert-random')\nconst nukeSubmit = document.getElementById('nuke-submit')\n\nconst ctx = canvas.getContext('2d')\n\nvar inserted\nvar tree\n\nconst init = function() {\n  inserted = [randomNumber()]\n  tree = new RedBlackTree(inserted[0])\n}\n\nconst draw = function() {\n  const origin = [ctx.canvas.width/2, 20]\n  drawTree(ctx, tree, origin, drawLine)\n  drawTree(ctx, tree, origin, drawNode)\n  drawTree(ctx, tree, origin, drawLabel)\n}\n\nconst redraw = function() {\n  canvas.width = innerHeight * scale\n  canvas.height = innerHeight * scale\n  valueList.innerHTML = \"[\" + inserted.join(', ') + \"]\"\n  draw()\n}\n\nconst insert = function(event) {\n  const value = parseInt(insertInput.value)\n  if (value) {\n    inserted.push(value)\n    tree = tree.insert(value)\n    redraw()\n  }\n}\n\nconst insertRnd = function(event) {\n  const newInt = randomNumber()\n  inserted.push(newInt)\n  tree = tree.insert(newInt)\n  redraw()\n}\n\nconst nuke = function(event) {\n  init()\n  redraw()\n}\n\ninit()\n\ninsertSubmit.onclick = insert\ninsertRandom.onclick = insertRnd\nnukeSubmit.onclick = nuke\nwindow.onresize = redraw\nwindow.onload = redraw\n\n"]}